========================================================
    MySQL 
        - Database creation 
        - Table creation 
        - SQL Sub Languages 
        - DML / Transaction - CRUD operations 
        - Selectors 
========================================================
1. Database  
    1.1 Create Database "EmployeeManagementDb"
        ```
        Create Database "EmployeeManagementDb";
        ```
    1.2 S.elect Database
        ```
        Use "EmployeeManagementDb";
        ```

2. Table
    2.1. Drop Table "departments" and Create Table "departments"
        ```
        DROP TABLE IF EXISTS departments;
        CREATE TABLE departments (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255) NOT NULL
        );
        ```
    2.2. Drop Table "employees" and Create Table "employees"
        ```
        DROP TABLE IF EXISTS employees;
        CREATE TABLE employees (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            dept_id INT NOT NULL,
            job_title VARCHAR(255) NOT NULL,
            salary DECIMAL(10, 2) NOT NULL,
            bonus DECIMAL(10, 2) NOT NULL,
            FOREIGN KEY (dept_id) REFERENCES Department(id)
        );
        ```
    2.3. Drop Table "projects" and Create Table "projects"
        ```
        DROP TABLE projects;
        CREATE TABLE projects (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            budget DECIMAL(15, 2) NOT NULL
        );
        ```
    2.4. Drop Table "assignments" and Create Table "assignments"
        ```
        DROP TABLE assignments;
        CREATE TABLE assignments (
            id INT AUTO_INCREMENT PRIMARY KEY,
            employee_id INT NOT NULL,
            project_id INT NOT NULL,
            role VARCHAR(255) NOT NULL,
            FOREIGN KEY (employee_id) REFERENCES Employee(id),
            FOREIGN KEY (project_id) REFERENCES Project(id)
        );
        ```

3. Data 
    3.1. For the `departments` Table
        ```sql
        INSERT INTO departments (name) VALUES
        ('IT Department'),
        ('Product Development'),
        ('Quality Assurance'),
        ('Sales'),
        ('IT Support');

        /* INSERT INTO departments (name) VALUES
        ('HR'),
        ('Finance'),
        ('Legal'),
        ('Customer Service'),
        ('Research & Development');  */
        ```

    3.2. For the `employees` Table
        ```sql
        INSERT INTO employees (name, dept_id, job_title, salary, bonus) VALUES
        ('John Doe', 1, 'Software Engineer', 70000, 5000),
        ('Jane Smith', 1, 'Data Scientist', 80000, 6000),
        ('Alice Johnson', 2, 'Product Manager', 90000, 7000),
        ('Bob Brown', 2, 'UI/UX Designer', 65000, 4500),
        ('Charlie Davis', 3, 'QA Engineer', 60000, 4000),
        ('Emily Wilson', 3, 'Technical Writer', 55000, 3500),
        ('Frank Thomas', 4, 'Sales Manager', 75000, 5500),
        ('Grace Lee', 4, 'Marketing Specialist', 68000, 5000),
        ('Henry Martinez', 5, 'System Administrator', 72000, 5200),
        ('Ivy Clark', 5, 'Database Administrator', 74000, 5300);
        ```

    3.3. For the `projects` Table
        ```sql
        INSERT INTO projects (name, budget) VALUES
        ('Project Alpha', 100000),
        ('Project Beta', 150000),
        ('Project Gamma', 200000),
        ('Project Delta', 250000),
        ('Project Epsilon', 300000);

        /* INSERT INTO projects (name, budget) VALUES
        ('Project Zeta', 350000),
        ('Project Eta', 400000),
        ('Project Theta', 450000),
        ('Project Iota', 500000),
        ('Project Kappa', 550000); */
        ```
    3.4. For the `assignments` Table
        ```sql
        INSERT INTO assignments (employee_id, project_id, role) VALUES
        (1, 1, 'Lead Developer'),
        (2, 1, 'Data Analyst'),
        (3, 2, 'Project Manager'),
        (4, 2, 'Designer'),
        (5, 3, 'QA Lead'),
        (6, 3, 'Technical Writer'),
        (7, 4, 'Sales Executive'),
        (8, 4, 'Marketing Analyst'),
        (9, 5, 'Systems Engineer'),
        (10, 5, 'Database Analyst');
        ```

4. CRUD Operations
    4.1. `departments` Table
        4.1.1. Create (Insert)
            To insert a new department with the name 'HR':

            ```sql
            INSERT INTO departments (name) VALUES ('HR');
            ```

        4.1.2. Read (Select)
            4.1.2.1.To read or select all departments:

            ```sql
            SELECT * FROM departments;
            ```

            4.1.2.2.To read a specific department by its name:

            ```sql
            SELECT * FROM departments WHERE name = 'HR';
            ```

        4.1.3. Update
            To update the name of a department with a specific `id`. 
            For example, if the department with `id = 5` 
            needs its name changed to 'Human Resources':

            ```sql
            UPDATE departments
            SET name = 'Human Resources'
            WHERE id = 5;
            ```

        4.1.4. Delete
            To delete a department with a specific `id`. 
            For example, to delete the department with `id = 5`:

            ```sql
            DELETE FROM departments
            WHERE id = 5;
            ```

    4.2. `employees` table
        4.2.1. Create (Insert)
            To insert a new employee into the `employees` table:
            Syntax:
            ```sql
            INSERT INTO employees (name, dept_id, job_title, salary, bonus) 
            VALUES ('Employee Name', department_id, 'Job Title', salary_amount, bonus_amount);
            ```

            Example:
            ```sql
            INSERT INTO employees (name, dept_id, job_title, salary, bonus) 
            VALUES ('Samantha Green', 1, 'Network Engineer', 75000, 4500);
            ```

        4.2.2. Read (Select)
            4.2.2.1.To read or select all employees:
                Syntax:
                ```sql
                SELECT * FROM employees;
                ```
                Example:
                ```sql
                SELECT * FROM employees;
                ```

            4.2.2.2.To read a specific employee by their `id`:
                Syntax:
                ```sql
                SELECT * FROM employees WHERE id = employee_id;
                ```
                Example:
                ```sql
                SELECT * FROM employees WHERE id = 11;
                ```

            4.2.2.3.To read employees by their department:
                Syntax:
                ```sql
                SELECT * FROM employees WHERE dept_id = department_id;
                ```

                Example:
                ```sql
                SELECT * FROM employees WHERE dept_id = 1;
                ```

        4.2.3. Update
            To update an existing employee's information. 
            For example, to update the job title and 
            salary of the employee with `id = 11`:
            Syntax:
            ```sql
            UPDATE employees
            SET job_title = 'Senior Software Engineer', salary = 80000
            WHERE id = 11;
            ```
            Example:
            ```sql
            UPDATE employees
            SET job_title = 'Senior Software Engineer', salary = 80000
            WHERE id = 11;
            ```

        4.2.4. Delete
            To delete an employee from the `employees` table. 
            For example, to delete the 
            employee with `id = 11`:
            Syntax:
            ```sql
            DELETE FROM employees
            WHERE id = employee_id;
            ```
            Example:
            ```sql
            DELETE FROM employees
            WHERE id = 11;
            ```
5. SQL selectors
    5.1. Column Selections
        Selecting specific columns:
        ```sql
        SELECT name, job_title FROM employees;
        ```

        Selecting all columns:
        ```sql
        SELECT * FROM employees;
        ```

    5.2. WHERE Condition
        Filter employees by department:
        ```sql
        SELECT * FROM employees WHERE dept_id = 1;
        ```

        Filter employees with salary greater than a certain amount:
        ```sql
        SELECT * FROM employees WHERE salary > 60000;
        ```

    5.3. Sorting
        Sort by salary in ascending order:
        ```sql
        SELECT * FROM employees ORDER BY salary ASC;
        ```

        Sort by salary in descending order:
        ```sql
        SELECT * FROM employees ORDER BY salary DESC;
        ```

        Sort by department and then by salary:
        ```sql
        SELECT * FROM employees ORDER BY dept_id, salary DESC;
        ```

    5.4. Aggregators
        Count the number of employees:
        ```sql
        SELECT COUNT(*) FROM employees;
        ```

        Calculate the average salary:
        ```sql
        SELECT AVG(salary) FROM employees;
        ```

        Find the maximum salary:
        ```sql
        SELECT MAX(salary) FROM employees;
        ```

        Find the minimum salary:
        ```sql
        SELECT MIN(salary) FROM employees;
        ```

        Sum of all bonuses:
        ```sql
        SELECT SUM(bonus) FROM employees;
        ```

    5.5. GROUP BY
        Group by department and get the average salary in each department:
        ```sql
        SELECT dept_id, AVG(salary) AS average_salary
        FROM employees
        GROUP BY dept_id;
        ```

        Group by job title and get the count of employees for each job title:
        ```sql
        SELECT job_title, COUNT(*) AS count
        FROM employees
        GROUP BY job_title;
        ```

    5.6. INNER JOIN
        Join with `departments` table to get department names for each employee:
        ```sql
        SELECT e.name, e.job_title, d.name AS department_name
        FROM employees e
        INNER JOIN departments d ON e.dept_id = d.id;
        ```

    5.7. LEFT OUTER JOIN
        Get all employees and their department names, 
        including those without a department:
        ```sql
        SELECT e.name, e.job_title, d.name AS department_name
        FROM employees e
        LEFT OUTER JOIN departments d ON e.dept_id = d.id;
        ```

    5.8. RIGHT OUTER JOIN
        Get all departments and their employees, 
        including departments without employees:
        ```sql
        SELECT e.name, e.job_title, d.name AS department_name
        FROM employees e
        RIGHT OUTER JOIN departments d ON e.dept_id = d.id;
        ```

    5.9 Summary
        - Column Selections: 
            Choose specific columns or all columns.
        - WHERE Condition: 
            Filter rows based on specified conditions.
        - Sorting: 
            Order results by one or more columns.
        - Aggregators: 
            Perform calculations on data (e.g., count, average, sum).
        - GROUP BY: 
            Group results and apply aggregate functions.
        - INNER JOIN: 
            Combine rows from two tables where there is a match.
        - LEFT OUTER JOIN: 
            Include all rows from the left table and 
            matched rows from the right table.
        - RIGHT OUTER JOIN: 
            Include all rows from the right table and 
            matched rows from the left table.

    